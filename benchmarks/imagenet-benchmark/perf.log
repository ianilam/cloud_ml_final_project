=> creating model 'alexnet'
Epoch: [0][  0/163]	Time  2.149 ( 2.149)	Data  0.504 ( 0.504)	Loss 6.9150e+00 (6.9150e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
Epoch: [0][ 10/163]	Time  1.147 ( 1.283)	Data  0.002 ( 0.048)	Loss 4.4294e+00 (6.4198e+00)	Acc@1 100.00 ( 79.55)	Acc@5 100.00 ( 81.82)
Epoch: [0][ 20/163]	Time  1.226 ( 2.322)	Data  0.002 ( 0.027)	Loss 0.0000e+00 (3.3738e+00)	Acc@1 100.00 ( 89.29)	Acc@5 100.00 ( 90.48)
Epoch: [0][ 30/163]	Time  1.182 ( 1.964)	Data  0.002 ( 0.019)	Loss 0.0000e+00 (2.2855e+00)	Acc@1 100.00 ( 92.74)	Acc@5 100.00 ( 93.55)
Epoch: [0][ 40/163]	Time  1.119 ( 1.768)	Data  0.002 ( 0.015)	Loss 0.0000e+00 (1.7281e+00)	Acc@1 100.00 ( 94.51)	Acc@5 100.00 ( 95.12)
Epoch: [0][ 50/163]	Time  1.553 ( 1.709)	Data  0.002 ( 0.013)	Loss 0.0000e+00 (1.3892e+00)	Acc@1 100.00 ( 95.59)	Acc@5 100.00 ( 96.08)
Epoch: [0][ 60/163]	Time  1.180 ( 1.714)	Data  0.002 ( 0.011)	Loss 0.0000e+00 (1.1615e+00)	Acc@1 100.00 ( 96.31)	Acc@5 100.00 ( 96.72)
Epoch: [0][ 70/163]	Time  1.818 ( 1.661)	Data  0.002 ( 0.010)	Loss 0.0000e+00 (9.9789e-01)	Acc@1 100.00 ( 96.83)	Acc@5 100.00 ( 97.18)
Epoch: [0][ 80/163]	Time  1.150 ( 1.599)	Data  0.004 ( 0.009)	Loss 0.0000e+00 (8.7470e-01)	Acc@1 100.00 ( 97.22)	Acc@5 100.00 ( 97.53)
Epoch: [0][ 90/163]	Time  1.119 ( 1.575)	Data  0.002 ( 0.008)	Loss 0.0000e+00 (7.7857e-01)	Acc@1 100.00 ( 97.53)	Acc@5 100.00 ( 97.80)
Epoch: [0][100/163]	Time  1.112 ( 1.533)	Data  0.002 ( 0.008)	Loss 0.0000e+00 (7.0149e-01)	Acc@1 100.00 ( 97.77)	Acc@5 100.00 ( 98.02)
Epoch: [0][110/163]	Time  1.123 ( 1.502)	Data  0.002 ( 0.007)	Loss 0.0000e+00 (6.3829e-01)	Acc@1 100.00 ( 97.97)	Acc@5 100.00 ( 98.20)
Epoch: [0][120/163]	Time  1.170 ( 1.483)	Data  0.002 ( 0.007)	Loss 0.0000e+00 (5.8554e-01)	Acc@1 100.00 ( 98.14)	Acc@5 100.00 ( 98.35)
Epoch: [0][130/163]	Time  1.388 ( 1.469)	Data  0.004 ( 0.007)	Loss 0.0000e+00 (5.4084e-01)	Acc@1 100.00 ( 98.28)	Acc@5 100.00 ( 98.47)
Epoch: [0][140/163]	Time  1.157 ( 1.450)	Data  0.002 ( 0.006)	Loss 0.0000e+00 (5.0248e-01)	Acc@1 100.00 ( 98.40)	Acc@5 100.00 ( 98.58)
Epoch: [0][150/163]	Time  1.119 ( 1.432)	Data  0.002 ( 0.006)	Loss 0.0000e+00 (4.6921e-01)	Acc@1 100.00 ( 98.51)	Acc@5 100.00 ( 98.68)
Epoch: [0][160/163]	Time  1.078 ( 1.418)	Data  0.002 ( 0.006)	Loss 0.0000e+00 (4.4006e-01)	Acc@1 100.00 ( 98.60)	Acc@5 100.00 ( 98.76)
Test: [  0/163]	Time  1.225 ( 1.225)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 10/163]	Time  0.346 ( 0.430)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 20/163]	Time  0.334 ( 0.404)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 30/163]	Time  0.340 ( 0.396)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 40/163]	Time  0.429 ( 0.405)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 50/163]	Time  0.785 ( 0.408)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 60/163]	Time  0.350 ( 0.403)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 70/163]	Time  0.342 ( 0.395)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 80/163]	Time  0.376 ( 0.391)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [ 90/163]	Time  0.371 ( 0.395)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [100/163]	Time  0.312 ( 0.392)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [110/163]	Time  1.431 ( 0.401)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [120/163]	Time  0.460 ( 0.402)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [130/163]	Time  0.348 ( 0.403)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [140/163]	Time  0.316 ( 0.405)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [150/163]	Time  0.346 ( 0.400)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Test: [160/163]	Time  0.255 ( 0.394)	Loss 0.0000e+00 (0.0000e+00)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
 * Acc@1 100.000 Acc@5 100.000
Tue Dec 10 03:02:06 2019    stats.out

         433133 function calls (424472 primitive calls) in 297.480 seconds

   Ordered by: cumulative time
   List reduced from 681 to 30 due to restriction <30>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      4/1    0.000    0.000  297.489  297.489 {built-in method builtins.exec}
        1    0.000    0.000  297.489  297.489 <string>:1(<module>)
        1    0.033    0.033  297.489  297.489 main.py:85(main)
        1    0.002    0.002  297.455  297.455 main.py:120(main_worker)
        1    0.117    0.117  230.130  230.130 main.py:277(train)
      163    0.002    0.000  129.255    0.793 tensor.py:138(backward)
      163    0.005    0.000  129.253    0.793 __init__.py:44(backward)
      163  129.232    0.793  129.232    0.793 {method 'run_backward' of 'torch._C._EngineBase' objects}
 8476/652    0.213    0.000  123.322    0.189 module.py:531(__call__)
      326    0.013    0.000  123.230    0.378 alexnet.py:44(forward)
      652    0.058    0.000  122.809    0.188 container.py:90(forward)
      326    0.002    0.000   91.053    0.279 data_parallel.py:138(forward)
     1630    0.016    0.000   78.315    0.048 conv.py:344(forward)
     1630    0.027    0.000   78.294    0.048 conv.py:334(conv2d_forward)
     1630   78.266    0.048   78.266    0.048 {built-in method conv2d}
        1    0.106    0.106   63.820   63.820 main.py:323(validate)
      163    0.118    0.001   33.111    0.203 sgd.py:71(step)
      978    0.009    0.000   31.512    0.032 linear.py:86(forward)
      978    0.013    0.000   31.500    0.032 functional.py:1355(linear)
      978   31.436    0.032   31.436    0.032 {built-in method addmm}
     7808   27.076    0.003   27.076    0.003 {method 'add_' of 'torch._C._TensorBase' objects}
      978    0.008    0.000   11.299    0.012 pooling.py:138(forward)
      978    0.006    0.000   11.291    0.012 _jit_internal.py:128(fn)
      978    0.008    0.000   11.284    0.012 functional.py:482(_max_pool2d)
      978   11.276    0.012   11.276    0.012 {built-in method max_pool2d}
      163    0.024    0.000    6.145    0.038 optimizer.py:159(zero_grad)
     2592    6.113    0.002    6.113    0.002 {method 'zero_' of 'torch._C._TensorBase' objects}
     3244    5.797    0.002    5.797    0.002 {method 'mul_' of 'torch._C._TensorBase' objects}
        2    0.000    0.000    3.042    1.521 main.py:369(save_checkpoint)
        2    0.564    0.282    1.921    0.961 shutil.py:96(copyfile)


